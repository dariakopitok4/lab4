1)Для вложенного класса допишите метод, который вывызвает метод  внешего  класса. 
 Во  внешнем  классе  допишите  метод,  который проверяет одно из полей внутреннего класса.
 Осуществлено в файле Parrot.h

2) Расширить иерархию классов
 с использованием абстактного класса в качестве основы иерархии. Это может быть новый класс или выбран класс из имеющихся

добавлен класс AliveOrganisms 

3) Расширьте иерархию двумя новыми классами. Первый класс должен содержать дополнительные поля public  и protected и protected наследоваться.
 Второй производний от первого public наследоваться. Исследовать возможность вызова наследуемых методов и получение доступа к полям. 

Добавлены класс Insects и производный от него Ant 

4) В одном из классов объявите константное поле (например, numberOfQuestions, size  и т.п.)
 и константые методы, продемонстируйте их использование: возможности инициализации, вызовы

Реализовано в Insects.h

5) Создайте класс Instector дружественный одному из классов. В Instectore определите метод iKnowAllAboutYou(),
 который выводит на консоль (в файл) значения всех приватных полей  друга.
 Определите класс Curator  c методом дружественным вашему классу iCanModify (…) (не класс, а только метод), 
который может изменить значения приватных полей класса

Реализовано в Animals.h 

6) В один из классов добавьте статическое поле objectCounter,
 который будет содержать количество созданных объектов класса (увеличивать в контрукторе и уменьшать в деструкторе). 
Создать метод для просмотра этого числа. 

реализовано в Animals 

7) Во всех классах (иерархии) создать виртуальный метод toConsole(), который выводит информацию о типе объекта и его текущих значениях.
 Создайте дополнительный класс Printer c методом iAmPrinting( AbstractClass *someobj). Формальным параметром метода должен быть укзатель
 на абстактный класс. В методе iAmPrinting должен вызываться  typeid, для определения типа объекта и метод объекта toConsole(). 
 В демонстрационной программе (main) создать укзатели на объекты всех ваших классов по иерархии (инициализировать указатели),
 объект класса Printer  и последоватльно вызвать его метод iAmPrinting  со всеми указателями в качестве аргументов. Пояснить результат. 

8) Используя const_cast, static_cast, dynamic_cast (повышающее, понижающее и перекрестное преобразование между классами в вашей иерархии)
  написать демонстрацию использования операторов приведения типа. 

Реализовано в строках 87-97